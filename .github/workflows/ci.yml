name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint -- --max-warnings 50
        continue-on-error: true

  testE2E:
    runs-on: ubuntu-latest
    needs: lint
    environment: unittests
    env:
      CI: true
      NODE_ENV: test
      ENV_NAME: unittests
      PLAYWRIGHT_SKIP_VITEST_GLOBALS: true
      PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
      PUBLIC_USE_TEST_MODE: true
      E2E_USERNAME: ${{ vars.E2E_USERNAME }}
      E2E_PASSWORD: ${{ vars.E2E_PASSWORD }}
      E2E_TEST_USER_ID: ${{ vars.E2E_TEST_USER_ID }}
      E2E_HEADLESS: true
      E2E_SLOW_MO: 0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests (Playwright)
        run: |
          echo "Environment variables check:"
          echo "PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL != '' }}"
          echo "PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY != '' }}"
          echo "E2E_USERNAME: ${{ vars.E2E_USERNAME != '' }}"
          echo "E2E_PASSWORD: ${{ vars.E2E_PASSWORD != '' }}"
          echo "E2E_TEST_USER_ID: ${{ vars.E2E_TEST_USER_ID != '' }}"
          npm run test:e2e

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm ci
          npm install -D @astrojs/check typescript undici

      - name: Run unit & integration tests (Vitest)
        run: npm run test:run
        env:
          NODE_ENV: test
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
          E2E_USERNAME: ${{ vars.E2E_USERNAME }}
          E2E_PASSWORD: ${{ vars.E2E_PASSWORD }}
          E2E_TEST_USER_ID: ${{ vars.E2E_TEST_USER_ID }}

  build:
    runs-on: ubuntu-latest
    needs: [testE2E, unit-tests]
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm ci
          npm install -D @astrojs/check typescript undici

      - name: Build production
        run: |
          node --import ./fetch-polyfill.js ./node_modules/astro/dist/cli/index.js build