---
import Layout from "../../layouts/Layout.astro";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { supabaseClient } from "@/db/supabase.client";
import type { BoardGameDTO } from "@/types";

export const prerender = false;

// Pobierz ID gry z parametrów URL
const { id } = Astro.params;

// Pobierz dane sesji użytkownika
const {
  data: { session },
} = await supabaseClient.auth.getSession();
const currentUserId = session?.user?.id;

// Obsługa błędu jeśli brak ID
if (!id) {
  return Astro.redirect("/games");
}

// Pobierz dane gry
const { data: game, error } = await supabaseClient.from("board_games").select("*").eq("id", id).single();

// Obsługa błędu - jeśli gra nie istnieje lub wystąpił inny błąd
if (error || !game) {
  return Astro.redirect("/games");
}

// Pobierz typy gry
const { data: gameTypesData } = await supabaseClient
  .from("board_game_types")
  .select("game_types(type)")
  .eq("game_id", id);

const gameTypes = gameTypesData || [];
const types = gameTypes.map((item) => (item?.game_types as any)?.type || "").filter(Boolean) || [];

// Pobierz recenzje dla gry
const { data: reviewsData } = await supabaseClient
  .from("reviews")
  .select(
    `
    id, 
    review_text, 
    user_id, 
    created_at,
    profiles!reviews_profile_userid_fkey (
      first_name,
      last_name
    )
  `,
  )
  .eq("game_id", id);

// Zabezpieczenie przed nullem - zawsze mamy tablicę
const reviews = reviewsData || [];

// Pobierz średnią ocenę
const { data: avgRatingData } = await supabaseClient.from("ratings").select("rating_value").eq("game_id", id);

const safeAvgRatingData = avgRatingData || [];
const avgRating =
  safeAvgRatingData.length > 0
    ? (safeAvgRatingData.reduce((sum, item) => sum + (item?.rating_value || 0), 0) / safeAvgRatingData.length).toFixed(
        1,
      )
    : "Brak ocen";
---

<Layout title={`${game.title} - BoardMateAI`}>
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
      <a
        href="/games"
        class="text-primary mb-4 inline-flex items-center hover:underline"
        data-test-id="back-to-catalog"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path
            fill-rule="evenodd"
            d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z"
            clip-rule="evenodd"></path>
        </svg>
        Powrót do katalogu
      </a>

      <Card class="mb-6" data-test-id="game-details-card">
        <CardHeader>
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <CardTitle class="text-2xl" data-test-id="game-title">{game.title}</CardTitle>
            <div class="flex items-center" data-test-id="game-rating">
              <span class="text-xl font-bold mr-1">{avgRating}</span>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 text-yellow-500"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
                ></path>
              </svg>
            </div>
          </div>
          {
            types.length > 0 && (
              <div class="flex flex-wrap gap-2 mt-2" data-test-id="game-types">
                {types.map((type: string) => (
                  <Badge variant="secondary">{type}</Badge>
                ))}
              </div>
            )
          }
        </CardHeader>
        <CardContent class="space-y-6">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4" data-test-id="game-stats">
            <div class="p-4 bg-muted/40 rounded-lg" data-test-id="game-players">
              <h3 class="text-sm font-medium mb-1">Liczba graczy</h3>
              <p class="text-lg font-bold">
                {game.min_players}{
                  game.max_players && game.min_players !== game.max_players ? `-${game.max_players}` : ""
                }
              </p>
            </div>
            <div class="p-4 bg-muted/40 rounded-lg" data-test-id="game-duration">
              <h3 class="text-sm font-medium mb-1">Czas gry</h3>
              <p class="text-lg font-bold">{game.duration} min</p>
            </div>
            <div class="p-4 bg-muted/40 rounded-lg" data-test-id="game-complexity">
              <h3 class="text-sm font-medium mb-1">Złożoność</h3>
              <div class="flex items-center">
                <div class="flex-grow h-2 bg-muted rounded-full overflow-hidden">
                  <div class="h-full bg-primary rounded-full" style={`width: ${((game.complexity || 1) / 5) * 100}%`}>
                  </div>
                </div>
                <span class="ml-2 text-sm font-medium">{game.complexity || "?"}/5</span>
              </div>
            </div>
          </div>

          {
            game.description && (
              <div data-test-id="game-description">
                <h3 class="text-lg font-medium mb-2">Opis</h3>
                <div class="p-4 bg-muted/20 rounded-lg">{game.description}</div>
              </div>
            )
          }

          <div>
            <h3 class="text-lg font-medium mb-2">Recenzje ({reviews?.length || 0})</h3>
            {
              reviews && reviews.length > 0 ? (
                <div class="space-y-4" data-test-id="reviews-list">
                  {reviews.map((review) => (
                    <div class="p-4 border rounded-lg" data-test-id={`review-${review.id}`}>
                      <div class="flex justify-between items-start mb-2">
                        <div class="font-medium">
                          {review?.profiles ? (
                            <a href={`/users/${review.user_id}/preferences`} class="text-primary hover:underline">
                              {`${review.profiles.first_name} ${review.profiles.last_name}`}
                            </a>
                          ) : review?.user_id ? (
                            `Użytkownik ID: ${review.user_id}`
                          ) : (
                            "Użytkownik anonimowy"
                          )}
                        </div>
                        <div class="flex items-center">
                          <div class="text-sm text-muted-foreground mr-2">
                            {review?.created_at
                              ? new Date(review.created_at as string).toLocaleDateString("pl-PL")
                              : "-"}
                          </div>
                          {currentUserId && review?.user_id === currentUserId && (
                            <button
                              class="text-red-500 hover:text-red-700 text-sm flex items-center delete-review"
                              data-review-id={review.id}
                              title="Usuń recenzję"
                              data-test-id="delete-review-button"
                            >
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-4 w-4"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                />
                              </svg>
                            </button>
                          )}
                        </div>
                      </div>
                      <p data-test-id="review-content">{review?.review_text || "Brak treści recenzji"}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <div class="p-4 border rounded-lg text-center text-muted-foreground" data-test-id="no-reviews-message">
                  Brak recenzji dla tej gry. Bądź pierwszą osobą, która doda recenzję!
                </div>
              )
            }
          </div>

          <div>
            <h3 class="text-lg font-medium mb-2">Dodaj swoją recenzję</h3>
            <form id="reviewForm" class="space-y-4 p-4 border rounded-lg" data-test-id="review-form">
              <div>
                <label for="rating" class="block text-sm font-medium mb-2">Twoja ocena:</label>
                <div class="flex items-center space-x-2" data-test-id="rating-stars">
                  {
                    [1, 2, 3, 4, 5].map((star) => (
                      <button
                        type="button"
                        class="rating-star text-2xl text-gray-300 hover:text-yellow-500 focus:outline-none transition-colors"
                        data-value={star}
                        data-test-id={`rating-star-${star}`}
                      >
                        ★
                      </button>
                    ))
                  }
                  <input type="hidden" id="ratingValue" name="rating" value="0" />
                  <span class="ml-2 text-sm" id="ratingDisplay">Nie oceniono</span>
                </div>
              </div>

              <div>
                <label for="reviewText" class="block text-sm font-medium mb-2">Twoja recenzja:</label>
                <textarea
                  id="reviewText"
                  name="reviewText"
                  rows="4"
                  class="w-full p-2 border rounded-md resize-none focus:ring focus:ring-primary/20"
                  placeholder="Podziel się swoją opinią na temat tej gry..."
                  data-test-id="review-text"></textarea>
              </div>

              <button
                type="submit"
                class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90 transition-colors"
                data-test-id="submit-review-button"
              >
                Dodaj recenzję
              </button>
            </form>
          </div>
        </CardContent>
      </Card>
    </div>
  </main>
</Layout>

<script>
  // Obsługa gwiazdek oceny
  const stars = document.querySelectorAll(".rating-star");
  const ratingInput = document.getElementById("ratingValue");
  const ratingDisplay = document.getElementById("ratingDisplay");

  // Funkcja do aktualizacji wyglądu gwiazdek
  function updateStars(selectedValue) {
    stars.forEach((star) => {
      const value = parseInt(star.getAttribute("data-value"));
      if (value <= selectedValue) {
        star.classList.add("text-yellow-500");
        star.classList.remove("text-gray-300");
      } else {
        star.classList.remove("text-yellow-500");
        star.classList.add("text-gray-300");
      }
    });

    // Aktualizacja ukrytego pola i wyświetlanego tekstu
    ratingInput.value = selectedValue;
    ratingDisplay.textContent = selectedValue > 0 ? `${selectedValue}/5` : "Nie oceniono";
  }

  // Dodanie obsługi kliknięć dla gwiazdek
  stars.forEach((star) => {
    star.addEventListener("click", () => {
      const value = parseInt(star.getAttribute("data-value"));
      updateStars(value);
    });
  });

  // Obsługa formularza recenzji
  const reviewForm = document.getElementById("reviewForm");

  reviewForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const ratingValue = parseInt(document.getElementById("ratingValue").value);
    const reviewText = document.getElementById("reviewText").value.trim();

    // Sprawdzanie walidacji
    if (ratingValue === 0) {
      alert("Proszę wybrać ocenę od 1 do 5");
      return;
    }

    if (reviewText.length < 10) {
      alert("Recenzja musi zawierać co najmniej 10 znaków");
      return;
    }

    // Pobranie ID gry z URL
    const gameId = window.location.pathname.split("/").pop();

    try {
      // Wysłanie recenzji
      const reviewResponse = await fetch("/api/reviews", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          gameId,
          reviewText: reviewText,
          rating: ratingValue,
        }),
      });

      if (!reviewResponse.ok) {
        const errorData = await reviewResponse.json();
        throw new Error(errorData.message || "Błąd podczas dodawania recenzji");
      }

      // Poczekaj na zakończenie wszystkich operacji
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Przeładowanie strony po pomyślnym dodaniu
      window.location.reload();
    } catch (error) {
      console.error("Błąd:", error);
      alert(`Wystąpił błąd: ${error.message}`);
    }
  });

  // Obsługa przycisku usuwania recenzji
  const deleteButtons = document.querySelectorAll(".delete-review");

  deleteButtons.forEach((button) => {
    button.addEventListener("click", async () => {
      if (!confirm("Czy na pewno chcesz usunąć tę recenzję?")) {
        return;
      }

      const reviewId = button.getAttribute("data-review-id");

      try {
        const response = await fetch(`/api/reviews/${reviewId}`, {
          method: "DELETE",
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Błąd podczas usuwania recenzji");
        }

        // Poczekaj na zakończenie wszystkich operacji
        await new Promise((resolve) => setTimeout(resolve, 1000));

        // Przeładowanie strony po pomyślnym usunięciu
        window.location.reload();
      } catch (error) {
        console.error("Błąd:", error);
        alert(`Wystąpił błąd: ${error.message}`);
      }
    });
  });
</script>
